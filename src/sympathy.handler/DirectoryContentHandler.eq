
/*
 * This file is part of Jkop
 * Copyright (c) 2016 Job and Esther Technologies, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

public class DirectoryContentHandler : HTTPRequestHandlerAdapter, PathVerifier
{
	public static DirectoryContentHandler for_content_dir(File dd) {
		return(new DirectoryContentHandler().set_content_dir(dd));
	}

	property bool list_directories = false;
	property String server_name;
	property String server_url;
	property bool allow_download_t_files = false;
	property String not_found_html;
	property File content_dir;
	property File template_dir;
	property int max_age = 300;

	Collection get_directory_entries_dirs(File ff) {
		var v = LinkedList.create();
		foreach(File f in ff.entries()) {
			if(f.is_directory()) {
				v.add(f.basename());
			}
		}
		return(v);
	}

	Collection get_directory_entries_files(File ff) {
		var v = LinkedList.create();
		foreach(File f in ff.entries()) {
			if(f.is_file()) {
				v.add(f.basename());
			}
		}
		return(v);
	}

	Collection get_directory_entries(File ff) {
		var v = LinkedList.create();
		foreach(File f in ff.entries()) {
			v.add(f.basename());
		}
		return(v);
	}

	public HashTable dir_to_json_object(File ff) {
		var v = HashTable.create();
		v.set("files", MergeSort.sort(get_directory_entries_files(ff)));
		v.set("subdirs", MergeSort.sort(get_directory_entries_dirs(ff)));
		return(v);
	}

	public String dir_to_json(File ff) {
		return(JSONEncoder.encode(dir_to_json_object(ff)));
	}

	public String dir_to_html(String display, File ff) {
		var sb = StringBuffer.for_initial_size(32 * 1024);
		sb.append("<html>\n");
		sb.append("<head>\n");
		sb.append("<title>%s</title>\n".printf().add(display).to_string());
		sb.append("<style>\n");
		sb.append("* { font-face: arial; font-size: 12px; }\n");
		sb.append("h1 { font-face: arial; font-size: 14px; font-style: bold; border-bottom: solid 1px black; padding: 4px; margin: 4px}\n");
		sb.append("#content a { text-decoration: none; color: #000080; }\n");
		sb.append("#content a:hover { text-decoration: none; color: #FFFFFF; font-weight: bold; }\n");
		sb.append(".entry { padding: 4px; }\n");
		sb.append(".entry:hover { background-color: #AAAACC; }\n");
		sb.append(".even { background-color: #DDDDDD; }\n");
		sb.append(".odd { background-color: #EEEEEE; }\n");
		sb.append("#footer { border-top: 1px solid black; padding: 4px; margin: 4px; font-size: 10px; text-align: right; }\n");
		sb.append("#footer a { font-size: 10px; text-decoration: none; color: #000000; }\n");
		sb.append("#footer a:hover { font-size: 10px; text-decoration: underline; color: #000000; }\n");
		sb.append("</style>\n");
		sb.append("<meta name=\"viewport\" content=\"initial-scale=1,maximum-scale=1\" />\n");
		sb.append("</head>\n");
		sb.append("<body>\n");
		sb.append("<h1>%s</h1>\n".printf().add(display).to_string());
		sb.append("<div id=\"content\">\n");
		var es = MergeSort.sort(get_directory_entries(ff));
		int n = 0;
		foreach(String f in es) {
			if(ff.entry(f).is_directory() == false) {
				continue;
			}
			var cc = "odd";
			if(n % 2 == 0) {
				cc = "even";
			}
			sb.append("<a href=\"%s\"><div class=\"entry %s\">%s/</div></a>".printf()
				.add(f).add(cc).add(f).to_string());
			n++;
		}
		foreach(String f in es) {
			if(ff.entry(f).is_directory()) {
				continue;
			}
			var cc = "odd";
			if(n % 2 == 0) {
				cc = "even";
			}
			sb.append("<a href=\"%s\"><div class=\"entry %s\">%s</div></a>".printf()
				.add(f).add(cc).add(f).to_string());
			n++;
		}
		sb.append("</div>\n");
		sb.append("<div id=\"footer\">");
		if(String.is_empty(server_name) == false) {
			if(String.is_empty(server_url) == false) {
				sb.append("Generated by <a href=\"%s\">%s</a>".printf().add(server_url).add(server_name).to_string());
			}
			else {
				sb.append("Generated by %s".printf().add(server_name).to_string());
			}
		}
		sb.append("</div>\n");
		sb.append("</body>\n");
		sb.append("</html>\n");
		return(sb.to_string());
	}

	bool is_directory(FileInfo ffs) {
		return(ffs != null && ffs.is_directory());
	}

	bool is_file(FileInfo ffs) {
		return(ffs != null && ffs.is_file());
	}

	public bool on_http_get(HTTPRequest req) {
		var url = req.get_url();
		if(url == null) {
			log_error("No URL");
			return(false);
		}
		var dir = get_content_dir();
		if(dir == null) {
			log_error("No content directory");
			return(false);
		}
		var path = req.get_relative_resource_path();
		if(path == null) {
			log_error("No relative resource path");
			return(false);
		}
		if(allow_download_t_files == false) {
			if(path.has_suffix(".t")) {
				return(false);
			}
		}
		String urls = null;
		if(url != null) {
			urls = url.get_path();
		}
		if(urls == null) {
			log_error("No url path");
			return(false);
		}
		File ff;
		if("/".equals(path)) {
			ff = dir;
		}
		else {
			ff = dir.entry(path);
		}
		var ffs = ff.stat();
		var ffp = ff.get_parent();
		if(is_directory(ffs) && urls.has_suffix("/") == false) {
			var nurl = url.dup();
			nurl.set_path(urls.append("/"));
			req.send_response(HTTPResponse.for_http_moved_temporarily(nurl.to_string()));
			return(true);
		}
		if(is_directory(ffs)) {
			var idx = ff.entry("index.html");
			if(idx.is_file()) {
				ff = idx;
				ffs = ff.stat();
				ffp = ff.get_parent();
			}
		}
		if(is_file(ffs) == false && is_directory(ffs) == false) {
			var cc = ffp.entry("%s.html".printf().add(ff.basename()).to_string());
			if(cc.is_file()) {
				ff = cc;
				ffs = ff.stat();
				ffp = ff.get_parent();
			}
		}
		if(is_file(ffs)) {
			var resp = HTTPResponse.for_file(ff);
			if(resp == null) {
				log_error("Unable to read file `%s'".printf().add(ff.basename()).to_string());
				return(false);
			}
			if(max_age > 0) {
				resp.add_header("Cache-Control", "max-age=%d".printf().add(max_age).to_string());
			}
			req.send_response(resp);
			return(true);
		}
		var params = HashTable.create();
		params.set("path", path);
		params.set("query", url.get_query_parameters());
		if(is_directory(ffs)) {
			var idx = ff.entry("index.html.t");
			if(idx.is_file()) {
				params.set("directory", dir_to_json_object(ff));
				ff = idx;
				ffs = ff.stat();
				ffp = ff.get_parent();
			}
		}
		if(is_directory(ffs)) {
			var idx = ff.entry("index.json");
			if(idx.is_file()) {
				ff = idx;
				ffs = ff.stat();
				ffp = ff.get_parent();
			}
			else {
				idx = ff.entry("index.json.t");
				if(idx.is_file()) {
					ff = idx;
					ffs = ff.stat();
					ffp = ff.get_parent();
				}
			}
		}
		if(list_directories) {
			if(is_directory(ffs)) {
				req.send_response(HTTPResponse.for_html_string(dir_to_html(path, ff)));
				return(true);
			}
			if("index.json".equals(ff.basename()) && is_file(ffs) == false) {
				req.send_response(HTTPResponse.for_json_string(dir_to_json(ffp)));
				return(true);
			}
			if("index.html".equals(ff.basename()) && is_file(ffs) == false) {
				req.send_response(HTTPResponse.for_html_string(dir_to_html(path, ffp)));
				return(true);
			}
		}
		if(is_directory(ffs)) {
			return(false);
		}
		File template;
		File document;
		if(template == null) {
			if(is_file(ffs) && ff.basename().has_suffix(".html.t")) {
				template = ff;
				document = ff;
			}
		}
		if(template == null && is_file(ffs) == false) {
			var tf = ffp.entry("%s.html.t".printf().add(ff.basename()).to_string());
			if(tf.is_file()) {
				template = tf;
				document = tf;
			}
		}
		if(template == null && is_file(ffs) == false && ff.basename().has_suffix(".html")) {
			var tf = ffp.entry("%s.t".printf().add(ff.basename()).to_string());
			if(tf.is_file()) {
				template = tf;
				document = tf;
			}
		}
		if(template == null) {
			File jf;
			if(is_file(ffs) && ff.has_extension("json")) {
				jf = ff;
			}
			else if(is_file(ffs) && ff.basename() != null && ff.basename().has_suffix(".json.t")) {
				jf = ff;
			}
			else if(is_file(ffs) == false && ff.has_extension("html")) {
				var pe = Path.strip_extension(ff.basename());
				jf = ffp.entry("%s.json".printf().add(pe).to_string());
				if(jf.is_file() == false) {
					jf = ffp.entry("%s.json.t".printf().add(pe).to_string());
				}
			}
			else if(is_file(ffs) == false) {
				jf = ffp.entry("%s.json".printf().add(ff.basename()).to_string());
				if(jf.is_file() == false) {
					jf = ffp.entry("%s.json.t".printf().add(ff.basename()).to_string());
				}
			}
			if(jf != null && jf.is_file()) {
				HashTable pp;
				var bn = jf.basename();
				if(bn != null && bn.has_suffix(".json.t")) {
					var tpl = Template.for_file(jf, "{{", "}}");
					if(tpl == null) {
						log_error("Failed to read JSON template: `%s'".printf().add(jf));
						req.send_response(HTTPResponse.for_http_internal_error("File format mismatch (1)"));
						return(true);
					}
					tpl.set_processor(new JSONTemplateProcessor());
					var str = tpl.to_string(null);
					if(str == null) {
						log_error("Failed to process JSON template: `%s'".printf().add(jf));
						req.send_response(HTTPResponse.for_http_internal_error("File format mismatch (2)"));
						return(true);
					}
					pp = JSONParser.parse_string(str) as HashTable;
					if(pp == null) {
						log_error("Failed to process JSON template: `%s'".printf().add(jf));
						req.send_response(HTTPResponse.for_http_internal_error("File format mismatch (3)"));
						return(true);
					}
				}
				else {
					pp = JSONParser.parse_file(jf) as HashTable;
					if(pp == null) {
						log_error("File `%s' does not translate to a JSON hash table".printf().add(jf));
						req.send_response(HTTPResponse.for_http_internal_error("File format mismatch (4)"));
						return(true);
					}
				}
				var commonfile = jf.get_parent().entry("__common__.json");
				if(commonfile.is_file()) {
					var cfp = JSONParser.parse_file(commonfile) as HashTable;
					if(cfp == null) {
						log_error("Failed to parse common JSON file: `%s'".printf().add(commonfile));
					}
					else {
						foreach(String key in pp.iterate_keys()) {
							cfp.set(key, pp.get(key));
						}
						pp = cfp;
					}
				}
				params.set("document", pp);
				var doctype = pp.get_string("type");
				if(String.is_empty(doctype) == false) {
					if(doctype.chr((int)'/') >= 0) {
						log_warning("Invalid document_type for `%s': `%s'".printf().add(ff).add(doctype));
						doctype = null;
					}
					else {
						template = find_json_template_for_document_type(doctype);
					}
				}
				else {
					doctype = "unknown";
				}
				if("redirect".equals(doctype)) {
					req.send_response(HTTPResponse.for_http_moved_temporarily(pp.get_string("url")));
					return(true);
				}
				if(template == null) {
					template = find_json_template_in_parent_dirs(ffp, doctype);
				}
				if(template == null) {
					log_error("Unable to find a template for document type `%s'".printf().add(doctype));
					req.send_response(HTTPResponse.for_http_internal_error("No template for JSON file"));
					return(true);
				}
				document = jf;
			}
		}
		if(document == null || template == null || template.is_file() == false) {
			return(false);
		}
		params.set("document_file", document.get_native_path());
		{
			var docdir = document;
			if(docdir.is_file()) {
				docdir = docdir.get_parent();
			}
			params.set("document_dir", docdir.get_native_path());
		}
		log_debug("Processing template file `%s'".printf().add(template));
		var tpl = Template.for_file(template, "<%", "%>", LinkedList.create().add(get_template_dir()));
		if(tpl == null) {
			log_error("Failed to process template file: `%s'".printf().add(template));
			req.send_response(HTTPResponse.for_http_internal_error("Failed to process template"));
			return(true);
		}
		var pr = new HTMLTemplateProcessor().set_path_verifier(this);
		pr.set_query_path(path);
		tpl.set_processor(pr);
		process_template_response(tpl, params, document, req);
		return(true);
	}

	File find_json_template_for_document_type(String doctype) {
		var template_dir = get_template_dir();
		if(template_dir == null) {
			return(null);
		}
		var ff = template_dir.entry("%s.html".printf().add(doctype).to_string());
		if(ff.is_file() == false) {
			ff = template_dir.entry("%s.html.t".printf().add(doctype).to_string());
		}
		if(ff.is_file()) {
			log_debug("Found JSON template `%s' in template directory.".printf().add(ff));
			return(ff);
		}
		return(null);
	}

	File find_json_template_in_parent_dirs(File ff, String doctype) {
		if(ff == null) {
			return(null);
		}
		log_debug("Checking for JSON template in `%s' in a parent directory ..".printf().add(ff));
		if(String.is_empty(doctype) == false) {
			var jt = ff.entry("document_template_%s.html.t".printf().add(doctype).to_string());
			if(jt.is_file()) {
				log_debug("Found JSON template `%s' in a parent directory (1)".printf().add(jt));
				return(jt);
			}
		}
		var jt = ff.entry("document_template.html.t");
		if(jt.is_file()) {
			log_debug("Found JSON template `%s' in a parent directory (2)".printf().add(jt));
			return(jt);
		}
		if(ff.is_same(get_content_dir())) {
			return(null);
		}
		return(find_json_template_in_parent_dirs(ff.get_parent(), doctype));
	}

	public void process_template_response(Template template, HashTable params, File document, HTTPRequest req) {
		HashTable data;
		if(params != null) {
			data = params.dup();
		}
		else {
			data = HashTable.create();
		}
		File dir;
		if(document != null) {
			dir = document.get_parent();
		}
		var str = template.to_string(data, dir);
		if(str == null) {
			req.send_response(HTTPResponse.for_http_internal_error());
		}
		else {
			var resp = new HTTPResponse();
			resp.set_status("200");
			resp.add_header("Content-Type", template.get_mimetype());
			resp.set_etag(MD5Encoder.encode(str));
			resp.set_body_string(str);
			req.send_response(resp);
		}
	}

	public bool path_exists(String path) {
		var dir = get_content_dir();
		if(dir == null || dir.is_directory() == false || path == null) {
			return(false);
		}
		var v = dir.entry(path);
		if(v.is_file() || v.is_directory()) {
			return(true);
		}
		var auto_extensions = LinkedList.create().add("html").add("html.t").add("json").add("json.t");
		foreach(String ext in auto_extensions) {
			var r = dir.entry("%s.%s".printf().add(path).add(ext).to_string());
			if(r.is_file()) {
				return(true);
			}
		}
		return(false);
	}
}
